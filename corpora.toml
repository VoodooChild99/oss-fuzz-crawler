arduinojson = ["msgpack_fuzzer", "json_fuzzer"]
bloaty = ["fuzz_target"]
boost-json = ["fuzz_parse", "fuzz_parser", "fuzz_basic_parser"]
cjson = ["cjson_read_fuzzer"]
curl = [
    "curl_fuzzer_smtp",
    "curl_fuzzer_ftp",
    "curl_fuzzer_pop3",
    "curl_fuzzer_gopher",
    "curl_fuzzer_file",
    "curl_fuzzer_rtsp",
    "curl_fuzzer",
    "curl_fuzzer_imap",
    "fuzz_url",
    "curl_fuzzer_ws",
    "curl_fuzzer_ldap",
    "curl_fuzzer_sftp",
    "curl_fuzzer_https",
    "curl_fuzzer_scp",
    "curl_fuzzer_http",
    "curl_fuzzer_smb",
    "curl_fuzzer_mqtt",
    "curl_fuzzer_rtmp",
    "curl_fuzzer_tftp",
    "curl_fuzzer_dict",
]
eigen = ["basicstuff_fuzzer", "solver_fuzzer"]
envoy = [
    "original_src_fuzz_test",
    "h2_capture_fuzz_test",
    "h2_capture_direct_response_persistent_fuzz_test",
    "http_inspector_fuzz_test",
    "verify_signature_fuzz_test",
    "utility_fuzz_test",
    "least_request_load_balancer_fuzz_test",
    "substitution_formatter_fuzz_test",
    "filter_fuzz_test",
    "udp_fuzz",
    "ext_authz_fuzz_test",
    "symbol_table_fuzz_test",
    "round_robin_load_balancer_fuzz_test",
    "listener_filter_buffer_fuzz_test",
    "h1_capture_persistent_fuzz_test",
    "uri_template_fuzz_test",
    "local_ratelimit_fuzz_test",
    "parser_fuzz_test",
    "path_normalizer_fuzz_test",
    "h1_capture_fuzz_test",
    "tls_inspector_fuzz_test",
    "health_check_fuzz_test",
    "http2_codec_impl_fuzz_test",
    "hash_fuzz_test",
    "stat_merger_fuzz_test",
    "conn_manager_impl_fuzz_test",
    "ext_proc_grpc_fuzz_test",
    "xray_fuzz_test",
    "xds_fuzz_test",
    "dns_filter_fuzz_test",
    "evaluator_fuzz_test",
    "h1_capture_direct_response_fuzz_test",
    "header_map_impl_fuzz_test",
    "route_fuzz_test",
    "proxy_protocol_fuzz_test",
    "http2_connection_fuzz_test",
    "http1_codec_impl_fuzz_test",
    "path_utility_fuzz_test",
    "network_readfilter_fuzz_test.dict",
    "network_readfilter_fuzz_test",
    "substitution_formatter_fuzz_test.dict",
    "config_fuzz_test",
    "response_header_fuzz_test",
    "h1_capture_direct_response_persistent_fuzz_test",
    "compressor_fuzz_test",
    "request_header_fuzz_test",
    "codec_fuzz_test",
    "jwt_authn_fuzz_test",
    "h2_capture_persistent_fuzz_test",
    "network_writefilter_fuzz_test",
    "random_load_balancer_fuzz_test",
    "get_sha_256_digest_fuzz_test",
    "json_fuzz_test",
    "hpack_fuzz_test",
    "json_sanitizer_fuzz_test",
    "h2_capture_direct_response_fuzz_test",
    "verify_signature_fuzz_test.dict",
    "original_dst_fuzz_test",
    "header_parser_fuzz_test",
    "buffer_fuzz_test",
    "server_fuzz_test",
]
exiv2 = ["fuzz-read-print-write"]
freetype2 = [
    "windowsfnt",
    "gzip",
    "type1-render-ftengine",
    "bdf-render",
    "bdf",
    "pcf-render",
    "type1-tar",
    "glyphs-bitmaps-pcf",
    "ftfuzzer",
    "truetype-render-i38",
    "type1-ftengine",
    "cff-render-ftengine",
    "bzip2",
    "windowsfnt-render",
    "cff-ftengine",
    "cidtype1",
    "lzw",
    "colrv1",
    "glyphs-outlines",
    "truetype",
    "pcf",
    "cff-render",
    "type1-render-tar",
    "truetype-render-i35",
    "type42-render",
    "type42",
    "cff",
    "truetype-render",
    "cidtype1-ftengine",
    "type1",
    "cidtype1-render-ftengine",
    "cidtype1-render",
    "type1-render",
]
giflib = ["dgif_protobuf_target", "dgif_target", "egif_target"]
grpc-httpjson-transcoding = [
    "message_reader_fuzz_test",
    "http_template_fuzz_test",
]
gstreamer = ["typefind", "gst-discoverer"]
h2o = [
    "h2o-fuzzer-http1",
    "h2o-fuzzer-http3",
    "h2o-fuzzer-url",
    "h2o-fuzzer-http2",
]
haproxy = ["fuzz_hpack_decode", "fuzz_cfg_parser"]
harfbuzz = [
    "hb-draw-fuzzer",
    "hb-shape-fuzzer",
    "hb-subset-fuzzer",
    "hb-repacker-fuzzer",
    "hb-set-fuzzer",
]
json = [
    "parse_bson_fuzzer",
    "parse_bjdata_fuzzer",
    "parse_msgpack_fuzzer",
    "parse_afl_fuzzer",
    "parse_ubjson_fuzzer",
    "parse_cbor_fuzzer",
]
json-c = ["tokener_parse_ex_fuzzer"]
jsoncons = [
    "fuzz_csv_encoder",
    "fuzz_ubjson_parser_max",
    "fuzz_parse",
    "fuzz_msgpack_parser_max",
    "fuzz_json_encoder",
    "fuzz_bson",
    "fuzz_bson_encoder",
    "fuzz_ubjson",
    "fuzz_ubjson_encoder",
    "fuzz_json_parser_max",
    "fuzz_msgpack_encoder",
    "fuzz_msgpack",
    "fuzz_bson_parser_max",
    "fuzz_json_cursor",
    "fuzz_cbor_encoder",
    "fuzz_csv",
    "fuzz_cbor",
    "fuzz_cbor_parser_max",
]
jsoncpp = ["jsoncpp_fuzzer", "jsoncpp_proto_fuzzer"]
jsonnet = [
    "convert_jsonnet_fuzzer_stream",
    "convert_jsonnet_fuzzer_regular",
    "convert_jsonnet_fuzzer_multi",
]
lame = ["fuzzer-encoder"]
lcms = [
    "cms_universal_transform_fuzzer",
    "cms_transform_all_fuzzer",
    "cms_profile_fuzzer",
    "cms_transform_extended_fuzzer",
    "cmsIT8_load_fuzzer",
    "cms_transform_fuzzer",
    "cms_overwrite_transform_fuzzer",
]
libarchive = ["libarchive_fuzzer"]
libavc = ["avc_dec_fuzzer", "svc_enc_fuzzer", "svc_dec_fuzzer"]
libbpf = ["bpf-object-fuzzer"]
libjpeg-turbo = [
    "cjpeg_fuzzer_2_1_x",
    "libjpeg_turbo_fuzzer_2_0_x",
    "libjpeg_turbo_fuzzer",
    "compress_fuzzer_2_1_x",
    "compress_yuv_fuzzer_2_1_x",
    "decompress_yuv_fuzzer",
    "compress_yuv_fuzzer_2_0_x",
    "transform_fuzzer_2_1_x",
    "compress_yuv_fuzzer",
    "compress16_lossless_fuzzer",
    "decompress_yuv_fuzzer_2_0_x",
    "compress12_fuzzer",
    "libjpeg_turbo_fuzzer_2_1_x",
    "transform_fuzzer_2_0_x",
    "transform_fuzzer",
    "cjpeg_fuzzer_2_0_x",
    "compress_fuzzer",
    "decompress_yuv_fuzzer_2_1_x",
    "compress_fuzzer_2_0_x",
    "compress_lossless_fuzzer",
    "cjpeg_fuzzer",
    "compress12_lossless_fuzzer",
]
libpcap = ["fuzz_both", "fuzz_pcap", "fuzz_filter"]
libpng = ["libpng_read_fuzzer"]
libtiff = ["tiff_read_rgba_fuzzer"]
libxml2 = ["html", "xpath", "uri", "xml", "schema", "regexp"]
libxslt = ["xpath", "xslt"]
libzip = ["zip_read_fuzzer"]
lua = ["fuzz_lua"]
mbedtls = [
    "fuzz_x509crl",
    "fuzz_pubkey",
    "fuzz_client",
    "fuzz_server",
    "fuzz_x509crt",
    "fuzz_pkcs7",
    "fuzz_privkey",
    "fuzz_dtlsserver",
    "fuzz_dtlsclient",
    "fuzz_x509csr",
]
mruby = ["mruby_fuzzer", "mruby_proto_fuzzer"]
openh264 = ["decoder_fuzzer"]
openjpeg = ["opj_decompress_fuzzer_JP2", "opj_decompress_fuzzer_J2K"]
openssl = [
    "cms_111",
    "cms_30",
    "bignum",
    "bignum_30",
    "crl_30",
    "cms",
    "asn1_111",
    "x509",
    "client_111",
    "x509_30",
    "bndiv",
    "asn1_30",
    "bignum_111",
    "bndiv_30",
    "asn1parse",
    "ct",
    "server_30",
    "conf",
    "bndiv_111",
    "conf_111",
    "ct_111",
    "cmp_30",
    "client",
    "ct_30",
    "server",
    "crl_111",
    "asn1parse_111",
    "client_30",
    "punycode",
    "x509_111",
    "server_111",
    "conf_30",
    "asn1",
    "asn1parse_30",
    "crl",
    "cmp",
]
openthread = [
    "ot-ncp-hdlc-received-fuzzer",
    "ot-cli-received-fuzzer",
    "ot-ip6-send-fuzzer",
    "ot-radio-receive-done-fuzzer",
]
pcre2 = ["pcre2_fuzzer"]
php = [
    "php-fuzz-exif",
    "php-fuzz-json",
    "php-fuzz-execute",
    "php-fuzz-unserializehash",
    "php-fuzz-parser",
    "php-fuzz-function-jit",
    "php-fuzz-unserialize",
    "php-fuzz-tracing-jit",
]
poppler = [
    "doc_fuzzer",
    "find_text_fuzzer",
    "qt_textbox_fuzzer",
    "pdf_fuzzer",
    "qt_annot_fuzzer",
    "util_fuzzer",
    "pdf_draw_fuzzer",
    "label_fuzzer",
    "qt_search_fuzzer",
    "page_label_fuzzer",
    "annot_fuzzer",
    "pdf_file_fuzzer",
    "qt_pdf_fuzzer",
    "qt_label_fuzzer",
    "doc_attr_fuzzer",
    "page_search_fuzzer",
]
proj4 = ["proj_crs_to_crs_fuzzer"]
rapidjson = ["fuzzer"]
rdkit = [
    "smiles_string_to_mol_fuzzer",
    "mol_data_stream_to_mol_fuzzer",
    "mol_deserialization_fuzzer",
]
re2 = ["re2_fuzzer"]
simdjson = [
    "fuzz_utf8",
    "fuzz_minifyimpl",
    "fuzz_dump_raw_tape",
    "fuzz_padded",
    "fuzz_atpointer",
    "fuzz_ndjson",
    "fuzz_parser",
    "fuzz_ondemand",
    "fuzz_implementations",
    "fuzz_print_json",
    "fuzz_minify",
    "fuzz_element",
    "fuzz_dump",
]
skia = [
    "region_set_path",
    "api_ddl_threading",
    "skjson",
    "skottie_json",
    "libvk_swiftshader.so",
    "skmeshspecification",
    "android_codec",
    "path_deserialize",
    "api_draw_functions",
    "api_gradients",
    "region_deserialize",
    "api_null_canvas",
    "api_skparagraph",
    "animated_image_decode",
    "jpeg_encoder",
    "api_triangulation",
    "cubic_quad_roots",
    "api_mock_gpu_canvas",
    "png_encoder",
    "skruntimeeffect",
    "colrv1",
    "api_polyutils",
    "image_filter_deserialize",
    "skp",
    "api_path_measure",
    "webp_encoder",
    "api_raster_n32_canvas",
    "sksl2metal",
    "image_decode_incremental",
    "api_create_ddl",
    "skdescriptor_deserialize",
    "api_image_filter",
    "sksl2spirv",
    "textblob_deserialize",
    "sksl2pipeline",
    "api_svg_canvas",
    "api_pathop",
    "svg_dom",
    "image_decode",
    "sksl2glsl",
    "image_filter_deserialize_width",
    "api_regionop",
]
spotify-json = ["fuzz_decode"]
sqlite3 = ["ossfuzz"]
stb = ["stb_png_read_fuzzer", "stbi_read_fuzzer"]
systemd = [
    "fuzz-bus-label",
    "fuzz-etc-hosts",
    "fuzz-resource-record",
    "fuzz-nspawn-settings",
    "fuzz-dhcp6-client",
    "fuzz-dhcp-server",
    "fuzz-bus-message",
    "fuzz-systemctl-parse-argv",
    "fuzz-catalog",
    "fuzz-network-parser",
    "fuzz-ndisc-rs",
    "fuzz-journald-kmsg",
    "fuzz-journald-stream",
    "fuzz-dhcp-server-relay",
    "fuzz-unit-file",
    "fuzz-bus-match",
    "fuzz-time-util",
    "fuzz-efi-string",
    "fuzz-xdg-desktop",
    "fuzz-calendarspec",
    "fuzz-json",
    "fuzz-hostname-setup",
    "fuzz-lldp-rx",
    "fuzz-journald-audit",
    "fuzz-netdev-parser",
    "fuzz-bootspec",
    "fuzz-compress",
    "fuzz-fido-id-desc",
    "fuzz-journal-remote",
    "fuzz-varlink",
    "fuzz-udev-rule-parse-value",
    "fuzz-efi-printf",
    "fuzz-dns-packet",
    "fuzz-link-parser",
    "fuzz-dhcp-client",
    "fuzz-env-file",
    "fuzz-udev-database",
    "fuzz-udev-rules",
    "fuzz-journald-native-fd",
    "fuzz-nspawn-oci",
    "fuzz-bcd",
    "fuzz-journald-syslog",
    "fuzz-journald-native",
]
valijson = ["fuzzer"]
vorbis = ["decode_fuzzer"]
w3m = ["fuzz_conv"]
woff2 = ["convert_woff2ttf_fuzzer", "convert_woff2ttf_fuzzer_new_entry"]
xpdf = ["fuzz_zxdoc", "fuzz_pdfload", "fuzz_JBIG2"]
zlib = [
    "example_flush_fuzzer",
    "minigzip_fuzzer",
    "example_large_fuzzer",
    "checksum_fuzzer",
    "example_dict_fuzzer",
    "zlib_uncompress2_fuzzer",
    "example_small_fuzzer",
    "zlib_uncompress_fuzzer",
    "compress_fuzzer",
]
